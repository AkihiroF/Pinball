//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_Source/Input/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e1547467-eba5-459f-b36a-fe6aa4dc3e77"",
            ""actions"": [
                {
                    ""name"": ""PullBall"",
                    ""type"": ""Button"",
                    ""id"": ""cd3a997b-a464-4203-ae4b-cba6eefad5e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PullRightFlipper"",
                    ""type"": ""Button"",
                    ""id"": ""44112b03-8e45-4d60-b3de-04b18d1f66ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PullLeftFlipper"",
                    ""type"": ""Button"",
                    ""id"": ""56b401ce-226f-4b61-8c3a-d46655c3064f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7b39e96-e411-410e-95b5-56f373ac08ab"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c110bcd6-3da0-4448-9765-d95129eea8b8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3382c823-e9ce-4350-a3c5-efabd74d1aa9"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullRightFlipper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7da4923-ebed-4957-89c0-4b905ded1bfd"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullLeftFlipper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PullBall = m_Player.FindAction("PullBall", throwIfNotFound: true);
        m_Player_PullRightFlipper = m_Player.FindAction("PullRightFlipper", throwIfNotFound: true);
        m_Player_PullLeftFlipper = m_Player.FindAction("PullLeftFlipper", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_PullBall;
    private readonly InputAction m_Player_PullRightFlipper;
    private readonly InputAction m_Player_PullLeftFlipper;
    public struct PlayerActions
    {
        private @InputManager m_Wrapper;
        public PlayerActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @PullBall => m_Wrapper.m_Player_PullBall;
        public InputAction @PullRightFlipper => m_Wrapper.m_Player_PullRightFlipper;
        public InputAction @PullLeftFlipper => m_Wrapper.m_Player_PullLeftFlipper;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @PullBall.started += instance.OnPullBall;
            @PullBall.performed += instance.OnPullBall;
            @PullBall.canceled += instance.OnPullBall;
            @PullRightFlipper.started += instance.OnPullRightFlipper;
            @PullRightFlipper.performed += instance.OnPullRightFlipper;
            @PullRightFlipper.canceled += instance.OnPullRightFlipper;
            @PullLeftFlipper.started += instance.OnPullLeftFlipper;
            @PullLeftFlipper.performed += instance.OnPullLeftFlipper;
            @PullLeftFlipper.canceled += instance.OnPullLeftFlipper;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @PullBall.started -= instance.OnPullBall;
            @PullBall.performed -= instance.OnPullBall;
            @PullBall.canceled -= instance.OnPullBall;
            @PullRightFlipper.started -= instance.OnPullRightFlipper;
            @PullRightFlipper.performed -= instance.OnPullRightFlipper;
            @PullRightFlipper.canceled -= instance.OnPullRightFlipper;
            @PullLeftFlipper.started -= instance.OnPullLeftFlipper;
            @PullLeftFlipper.performed -= instance.OnPullLeftFlipper;
            @PullLeftFlipper.canceled -= instance.OnPullLeftFlipper;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnPullBall(InputAction.CallbackContext context);
        void OnPullRightFlipper(InputAction.CallbackContext context);
        void OnPullLeftFlipper(InputAction.CallbackContext context);
    }
}
